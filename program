import random

# -------------------------
# 1. 질병별 증상 데이터
# -------------------------
disease_data = {
    "수족구": ["물집", "발열", "인후통", "식욕부진", "붉은 반점"],
    "감기": ["콧물", "코막힘", "재채기", "인후통", "미열", "두통"],
    "천식": ["천명", "기침", "흉부압박", "가래", "호흡곤란"],
    "독감": ["두통", "발열", "오한", "근육통"],
    "결핵": ["기침", "혈담", "발열", "신경과민", "식욕부진"],
    "백일해": ["콧물", "결막염", "눈물", "기침", "가래", "기침 후 구토"],
    "코로나": ["발열", "기침", "오한", "두통", "근육통", "미각상실", "인후통", "후각상실", "콧물"]
}

# -------------------------
# 2. 증상별 질병 가중치 (10~50으로 축소)
# -------------------------
symptom_weight = {
    "기침": {"감기": 35, "독감": 25, "코로나": 20, "결핵": 45, "천식": 50, "백일해": 40},
    "발열": {"감기": 20, "독감": 40, "코로나": 35, "결핵": 30, "수족구": 40},
    "인후통": {"감기": 30, "코로나": 35, "수족구": 40},
    "근육통": {"감기": 25, "독감": 45, "코로나": 50},
    "두통": {"감기": 15, "독감": 35, "코로나": 40},
    "오한": {"독감": 50, "코로나": 45},
    "콧물": {"감기": 45, "코로나": 20, "백일해": 25},
    "붉은 반점": {"수족구": 50},
    "물집": {"수족구": 45},
    "결막염": {"백일해": 35},
    "기침 후 구토": {"백일해": 50},
    "천명": {"천식": 45},
    "흉부압박": {"천식": 40},
    "가래": {"천식": 30, "백일해": 25},
    "호흡곤란": {"천식": 45},
    "혈담": {"결핵": 50},
    "식욕부진": {"결핵": 35, "수족구": 25}
}

# -------------------------
# 3. 인구 기반 보정 (0.5~1.2배)
# -------------------------
population_factor = {
    "감기": 1.2,
    "독감": 1.0,
    "코로나": 0.9,
    "천식": 0.8,
    "결핵": 0.7,
    "백일해": 0.6,
    "수족구": 0.75
}

# -------------------------
# 4. 환자 증상 입력 (예시)
# -------------------------
patient_symptoms = ["기침", "발열", "인후통"]

# -------------------------
# 5. 진단 알고리즘
# -------------------------
scores = {}

for disease, symptoms in disease_data.items():
    base_score = 0

    for s in patient_symptoms:
        if s in symptom_weight and disease in symptom_weight[s]:
            base_score += symptom_weight[s][disease]
        elif s in symptoms:
            base_score += 15  # 기본 점수 (가중치가 없지만 일치하는 경우)
    
    # 증상 일치율 보정
    match_ratio = len(set(patient_symptoms) & set(symptoms)) / len(symptoms)
    base_score *= (0.5 + match_ratio)

    # 인구 보정 적용
    base_score *= population_factor.get(disease, 1.0)

    # 약간의 변동 추가
    base_score += random.uniform(-1, 1)

    scores[disease] = round(base_score, 2)

# -------------------------
# 6. 점수 정규화 (0~100 범위)
# -------------------------
max_score = max(scores.values())
for d in scores:
    scores[d] = round((scores[d] / max_score) * 100, 2)

# -------------------------
# 7. 출력
# -------------------------
ranked = sorted(scores.items(), key=lambda x: x[1], reverse=True)

print("=== 진단 결과 ===")
for i, (d, s) in enumerate(ranked, 1):
    print(f"{i}순위: {d} ({s}점)")

print("\n가장 가능성 높은 질병:", ranked[0][0])